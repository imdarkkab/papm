/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:18 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.nichesoft.bean.Corporate;
import com.nichesoft.bean.jpa.CorporateEntity;
import java.util.Date;
import com.nichesoft.business.service.mapping.CorporateServiceMapper;
import com.nichesoft.data.repository.jpa.CorporateJpaRepository;
import com.nichesoft.test.CorporateFactoryForTest;
import com.nichesoft.test.CorporateEntityFactoryForTest;
import com.nichesoft.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CorporateService
 */
@RunWith(MockitoJUnitRunner.class)
public class CorporateServiceImplTest {

	@InjectMocks
	private CorporateServiceImpl corporateService;
	@Mock
	private CorporateJpaRepository corporateJpaRepository;
	@Mock
	private CorporateServiceMapper corporateServiceMapper;
	
	private CorporateFactoryForTest corporateFactoryForTest = new CorporateFactoryForTest();

	private CorporateEntityFactoryForTest corporateEntityFactoryForTest = new CorporateEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer corporateId = mockValues.nextInteger();
		
		CorporateEntity corporateEntity = corporateJpaRepository.findOne(corporateId);
		
		Corporate corporate = corporateFactoryForTest.newCorporate();
		when(corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntity)).thenReturn(corporate);

		// When
		Corporate corporateFound = corporateService.findById(corporateId);

		// Then
		assertEquals(corporate.getCorporateId(),corporateFound.getCorporateId());
	}

	@Test
	public void findAll() {
		// Given
		List<CorporateEntity> corporateEntitys = new ArrayList<CorporateEntity>();
		CorporateEntity corporateEntity1 = corporateEntityFactoryForTest.newCorporateEntity();
		corporateEntitys.add(corporateEntity1);
		CorporateEntity corporateEntity2 = corporateEntityFactoryForTest.newCorporateEntity();
		corporateEntitys.add(corporateEntity2);
		when(corporateJpaRepository.findAll()).thenReturn(corporateEntitys);
		
		Corporate corporate1 = corporateFactoryForTest.newCorporate();
		when(corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntity1)).thenReturn(corporate1);
		Corporate corporate2 = corporateFactoryForTest.newCorporate();
		when(corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntity2)).thenReturn(corporate2);

		// When
		List<Corporate> corporatesFounds = corporateService.findAll();

		// Then
		assertTrue(corporate1 == corporatesFounds.get(0));
		assertTrue(corporate2 == corporatesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Corporate corporate = corporateFactoryForTest.newCorporate();

		CorporateEntity corporateEntity = corporateEntityFactoryForTest.newCorporateEntity();
		when(corporateJpaRepository.findOne(corporate.getCorporateId())).thenReturn(null);
		
		corporateEntity = new CorporateEntity();
		corporateServiceMapper.mapCorporateToCorporateEntity(corporate, corporateEntity);
		CorporateEntity corporateEntitySaved = corporateJpaRepository.save(corporateEntity);
		
		Corporate corporateSaved = corporateFactoryForTest.newCorporate();
		when(corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntitySaved)).thenReturn(corporateSaved);

		// When
		Corporate corporateResult = corporateService.create(corporate);

		// Then
		assertTrue(corporateResult == corporateSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Corporate corporate = corporateFactoryForTest.newCorporate();

		CorporateEntity corporateEntity = corporateEntityFactoryForTest.newCorporateEntity();
		when(corporateJpaRepository.findOne(corporate.getCorporateId())).thenReturn(corporateEntity);

		// When
		Exception exception = null;
		try {
			corporateService.create(corporate);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Corporate corporate = corporateFactoryForTest.newCorporate();

		CorporateEntity corporateEntity = corporateEntityFactoryForTest.newCorporateEntity();
		when(corporateJpaRepository.findOne(corporate.getCorporateId())).thenReturn(corporateEntity);
		
		CorporateEntity corporateEntitySaved = corporateEntityFactoryForTest.newCorporateEntity();
		when(corporateJpaRepository.save(corporateEntity)).thenReturn(corporateEntitySaved);
		
		Corporate corporateSaved = corporateFactoryForTest.newCorporate();
		when(corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntitySaved)).thenReturn(corporateSaved);

		// When
		Corporate corporateResult = corporateService.update(corporate);

		// Then
		verify(corporateServiceMapper).mapCorporateToCorporateEntity(corporate, corporateEntity);
		assertTrue(corporateResult == corporateSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer corporateId = mockValues.nextInteger();

		// When
		corporateService.delete(corporateId);

		// Then
		verify(corporateJpaRepository).delete(corporateId);
		
	}

}
