/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:20 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.nichesoft.bean.UserPermission;
import com.nichesoft.bean.jpa.UserPermissionEntity;
import com.nichesoft.business.service.mapping.UserPermissionServiceMapper;
import com.nichesoft.data.repository.jpa.UserPermissionJpaRepository;
import com.nichesoft.test.UserPermissionFactoryForTest;
import com.nichesoft.test.UserPermissionEntityFactoryForTest;
import com.nichesoft.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UserPermissionService
 */
@RunWith(MockitoJUnitRunner.class)
public class UserPermissionServiceImplTest {

	@InjectMocks
	private UserPermissionServiceImpl userPermissionService;
	@Mock
	private UserPermissionJpaRepository userPermissionJpaRepository;
	@Mock
	private UserPermissionServiceMapper userPermissionServiceMapper;
	
	private UserPermissionFactoryForTest userPermissionFactoryForTest = new UserPermissionFactoryForTest();

	private UserPermissionEntityFactoryForTest userPermissionEntityFactoryForTest = new UserPermissionEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer userPermissionId = mockValues.nextInteger();
		
		UserPermissionEntity userPermissionEntity = userPermissionJpaRepository.findOne(userPermissionId);
		
		UserPermission userPermission = userPermissionFactoryForTest.newUserPermission();
		when(userPermissionServiceMapper.mapUserPermissionEntityToUserPermission(userPermissionEntity)).thenReturn(userPermission);

		// When
		UserPermission userPermissionFound = userPermissionService.findById(userPermissionId);

		// Then
		assertEquals(userPermission.getUserPermissionId(),userPermissionFound.getUserPermissionId());
	}

	@Test
	public void findAll() {
		// Given
		List<UserPermissionEntity> userPermissionEntitys = new ArrayList<UserPermissionEntity>();
		UserPermissionEntity userPermissionEntity1 = userPermissionEntityFactoryForTest.newUserPermissionEntity();
		userPermissionEntitys.add(userPermissionEntity1);
		UserPermissionEntity userPermissionEntity2 = userPermissionEntityFactoryForTest.newUserPermissionEntity();
		userPermissionEntitys.add(userPermissionEntity2);
		when(userPermissionJpaRepository.findAll()).thenReturn(userPermissionEntitys);
		
		UserPermission userPermission1 = userPermissionFactoryForTest.newUserPermission();
		when(userPermissionServiceMapper.mapUserPermissionEntityToUserPermission(userPermissionEntity1)).thenReturn(userPermission1);
		UserPermission userPermission2 = userPermissionFactoryForTest.newUserPermission();
		when(userPermissionServiceMapper.mapUserPermissionEntityToUserPermission(userPermissionEntity2)).thenReturn(userPermission2);

		// When
		List<UserPermission> userPermissionsFounds = userPermissionService.findAll();

		// Then
		assertTrue(userPermission1 == userPermissionsFounds.get(0));
		assertTrue(userPermission2 == userPermissionsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		UserPermission userPermission = userPermissionFactoryForTest.newUserPermission();

		UserPermissionEntity userPermissionEntity = userPermissionEntityFactoryForTest.newUserPermissionEntity();
		when(userPermissionJpaRepository.findOne(userPermission.getUserPermissionId())).thenReturn(null);
		
		userPermissionEntity = new UserPermissionEntity();
		userPermissionServiceMapper.mapUserPermissionToUserPermissionEntity(userPermission, userPermissionEntity);
		UserPermissionEntity userPermissionEntitySaved = userPermissionJpaRepository.save(userPermissionEntity);
		
		UserPermission userPermissionSaved = userPermissionFactoryForTest.newUserPermission();
		when(userPermissionServiceMapper.mapUserPermissionEntityToUserPermission(userPermissionEntitySaved)).thenReturn(userPermissionSaved);

		// When
		UserPermission userPermissionResult = userPermissionService.create(userPermission);

		// Then
		assertTrue(userPermissionResult == userPermissionSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		UserPermission userPermission = userPermissionFactoryForTest.newUserPermission();

		UserPermissionEntity userPermissionEntity = userPermissionEntityFactoryForTest.newUserPermissionEntity();
		when(userPermissionJpaRepository.findOne(userPermission.getUserPermissionId())).thenReturn(userPermissionEntity);

		// When
		Exception exception = null;
		try {
			userPermissionService.create(userPermission);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		UserPermission userPermission = userPermissionFactoryForTest.newUserPermission();

		UserPermissionEntity userPermissionEntity = userPermissionEntityFactoryForTest.newUserPermissionEntity();
		when(userPermissionJpaRepository.findOne(userPermission.getUserPermissionId())).thenReturn(userPermissionEntity);
		
		UserPermissionEntity userPermissionEntitySaved = userPermissionEntityFactoryForTest.newUserPermissionEntity();
		when(userPermissionJpaRepository.save(userPermissionEntity)).thenReturn(userPermissionEntitySaved);
		
		UserPermission userPermissionSaved = userPermissionFactoryForTest.newUserPermission();
		when(userPermissionServiceMapper.mapUserPermissionEntityToUserPermission(userPermissionEntitySaved)).thenReturn(userPermissionSaved);

		// When
		UserPermission userPermissionResult = userPermissionService.update(userPermission);

		// Then
		verify(userPermissionServiceMapper).mapUserPermissionToUserPermissionEntity(userPermission, userPermissionEntity);
		assertTrue(userPermissionResult == userPermissionSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer userPermissionId = mockValues.nextInteger();

		// When
		userPermissionService.delete(userPermissionId);

		// Then
		verify(userPermissionJpaRepository).delete(userPermissionId);
		
	}

}
