/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.nichesoft.bean.Language;
import com.nichesoft.bean.jpa.LanguageEntity;
import java.util.List;
import com.nichesoft.business.service.mapping.LanguageServiceMapper;
import com.nichesoft.data.repository.jpa.LanguageJpaRepository;
import com.nichesoft.test.LanguageFactoryForTest;
import com.nichesoft.test.LanguageEntityFactoryForTest;
import com.nichesoft.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of LanguageService
 */
@RunWith(MockitoJUnitRunner.class)
public class LanguageServiceImplTest {

	@InjectMocks
	private LanguageServiceImpl languageService;
	@Mock
	private LanguageJpaRepository languageJpaRepository;
	@Mock
	private LanguageServiceMapper languageServiceMapper;
	
	private LanguageFactoryForTest languageFactoryForTest = new LanguageFactoryForTest();

	private LanguageEntityFactoryForTest languageEntityFactoryForTest = new LanguageEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer languageId = mockValues.nextInteger();
		
		LanguageEntity languageEntity = languageJpaRepository.findOne(languageId);
		
		Language language = languageFactoryForTest.newLanguage();
		when(languageServiceMapper.mapLanguageEntityToLanguage(languageEntity)).thenReturn(language);

		// When
		Language languageFound = languageService.findById(languageId);

		// Then
		assertEquals(language.getLanguageId(),languageFound.getLanguageId());
	}

	@Test
	public void findAll() {
		// Given
		List<LanguageEntity> languageEntitys = new ArrayList<LanguageEntity>();
		LanguageEntity languageEntity1 = languageEntityFactoryForTest.newLanguageEntity();
		languageEntitys.add(languageEntity1);
		LanguageEntity languageEntity2 = languageEntityFactoryForTest.newLanguageEntity();
		languageEntitys.add(languageEntity2);
		when(languageJpaRepository.findAll()).thenReturn(languageEntitys);
		
		Language language1 = languageFactoryForTest.newLanguage();
		when(languageServiceMapper.mapLanguageEntityToLanguage(languageEntity1)).thenReturn(language1);
		Language language2 = languageFactoryForTest.newLanguage();
		when(languageServiceMapper.mapLanguageEntityToLanguage(languageEntity2)).thenReturn(language2);

		// When
		List<Language> languagesFounds = languageService.findAll();

		// Then
		assertTrue(language1 == languagesFounds.get(0));
		assertTrue(language2 == languagesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Language language = languageFactoryForTest.newLanguage();

		LanguageEntity languageEntity = languageEntityFactoryForTest.newLanguageEntity();
		when(languageJpaRepository.findOne(language.getLanguageId())).thenReturn(null);
		
		languageEntity = new LanguageEntity();
		languageServiceMapper.mapLanguageToLanguageEntity(language, languageEntity);
		LanguageEntity languageEntitySaved = languageJpaRepository.save(languageEntity);
		
		Language languageSaved = languageFactoryForTest.newLanguage();
		when(languageServiceMapper.mapLanguageEntityToLanguage(languageEntitySaved)).thenReturn(languageSaved);

		// When
		Language languageResult = languageService.create(language);

		// Then
		assertTrue(languageResult == languageSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Language language = languageFactoryForTest.newLanguage();

		LanguageEntity languageEntity = languageEntityFactoryForTest.newLanguageEntity();
		when(languageJpaRepository.findOne(language.getLanguageId())).thenReturn(languageEntity);

		// When
		Exception exception = null;
		try {
			languageService.create(language);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Language language = languageFactoryForTest.newLanguage();

		LanguageEntity languageEntity = languageEntityFactoryForTest.newLanguageEntity();
		when(languageJpaRepository.findOne(language.getLanguageId())).thenReturn(languageEntity);
		
		LanguageEntity languageEntitySaved = languageEntityFactoryForTest.newLanguageEntity();
		when(languageJpaRepository.save(languageEntity)).thenReturn(languageEntitySaved);
		
		Language languageSaved = languageFactoryForTest.newLanguage();
		when(languageServiceMapper.mapLanguageEntityToLanguage(languageEntitySaved)).thenReturn(languageSaved);

		// When
		Language languageResult = languageService.update(language);

		// Then
		verify(languageServiceMapper).mapLanguageToLanguageEntity(language, languageEntity);
		assertTrue(languageResult == languageSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer languageId = mockValues.nextInteger();

		// When
		languageService.delete(languageId);

		// Then
		verify(languageJpaRepository).delete(languageId);
		
	}

}
