/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.nichesoft.bean.MenuMain;
import com.nichesoft.bean.jpa.MenuMainEntity;
import com.nichesoft.business.service.mapping.MenuMainServiceMapper;
import com.nichesoft.data.repository.jpa.MenuMainJpaRepository;
import com.nichesoft.test.MenuMainFactoryForTest;
import com.nichesoft.test.MenuMainEntityFactoryForTest;
import com.nichesoft.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of MenuMainService
 */
@RunWith(MockitoJUnitRunner.class)
public class MenuMainServiceImplTest {

	@InjectMocks
	private MenuMainServiceImpl menuMainService;
	@Mock
	private MenuMainJpaRepository menuMainJpaRepository;
	@Mock
	private MenuMainServiceMapper menuMainServiceMapper;
	
	private MenuMainFactoryForTest menuMainFactoryForTest = new MenuMainFactoryForTest();

	private MenuMainEntityFactoryForTest menuMainEntityFactoryForTest = new MenuMainEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer menuMainId = mockValues.nextInteger();
		
		MenuMainEntity menuMainEntity = menuMainJpaRepository.findOne(menuMainId);
		
		MenuMain menuMain = menuMainFactoryForTest.newMenuMain();
		when(menuMainServiceMapper.mapMenuMainEntityToMenuMain(menuMainEntity)).thenReturn(menuMain);

		// When
		MenuMain menuMainFound = menuMainService.findById(menuMainId);

		// Then
		assertEquals(menuMain.getMenuMainId(),menuMainFound.getMenuMainId());
	}

	@Test
	public void findAll() {
		// Given
		List<MenuMainEntity> menuMainEntitys = new ArrayList<MenuMainEntity>();
		MenuMainEntity menuMainEntity1 = menuMainEntityFactoryForTest.newMenuMainEntity();
		menuMainEntitys.add(menuMainEntity1);
		MenuMainEntity menuMainEntity2 = menuMainEntityFactoryForTest.newMenuMainEntity();
		menuMainEntitys.add(menuMainEntity2);
		when(menuMainJpaRepository.findAll()).thenReturn(menuMainEntitys);
		
		MenuMain menuMain1 = menuMainFactoryForTest.newMenuMain();
		when(menuMainServiceMapper.mapMenuMainEntityToMenuMain(menuMainEntity1)).thenReturn(menuMain1);
		MenuMain menuMain2 = menuMainFactoryForTest.newMenuMain();
		when(menuMainServiceMapper.mapMenuMainEntityToMenuMain(menuMainEntity2)).thenReturn(menuMain2);

		// When
		List<MenuMain> menuMainsFounds = menuMainService.findAll();

		// Then
		assertTrue(menuMain1 == menuMainsFounds.get(0));
		assertTrue(menuMain2 == menuMainsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		MenuMain menuMain = menuMainFactoryForTest.newMenuMain();

		MenuMainEntity menuMainEntity = menuMainEntityFactoryForTest.newMenuMainEntity();
		when(menuMainJpaRepository.findOne(menuMain.getMenuMainId())).thenReturn(null);
		
		menuMainEntity = new MenuMainEntity();
		menuMainServiceMapper.mapMenuMainToMenuMainEntity(menuMain, menuMainEntity);
		MenuMainEntity menuMainEntitySaved = menuMainJpaRepository.save(menuMainEntity);
		
		MenuMain menuMainSaved = menuMainFactoryForTest.newMenuMain();
		when(menuMainServiceMapper.mapMenuMainEntityToMenuMain(menuMainEntitySaved)).thenReturn(menuMainSaved);

		// When
		MenuMain menuMainResult = menuMainService.create(menuMain);

		// Then
		assertTrue(menuMainResult == menuMainSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		MenuMain menuMain = menuMainFactoryForTest.newMenuMain();

		MenuMainEntity menuMainEntity = menuMainEntityFactoryForTest.newMenuMainEntity();
		when(menuMainJpaRepository.findOne(menuMain.getMenuMainId())).thenReturn(menuMainEntity);

		// When
		Exception exception = null;
		try {
			menuMainService.create(menuMain);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		MenuMain menuMain = menuMainFactoryForTest.newMenuMain();

		MenuMainEntity menuMainEntity = menuMainEntityFactoryForTest.newMenuMainEntity();
		when(menuMainJpaRepository.findOne(menuMain.getMenuMainId())).thenReturn(menuMainEntity);
		
		MenuMainEntity menuMainEntitySaved = menuMainEntityFactoryForTest.newMenuMainEntity();
		when(menuMainJpaRepository.save(menuMainEntity)).thenReturn(menuMainEntitySaved);
		
		MenuMain menuMainSaved = menuMainFactoryForTest.newMenuMain();
		when(menuMainServiceMapper.mapMenuMainEntityToMenuMain(menuMainEntitySaved)).thenReturn(menuMainSaved);

		// When
		MenuMain menuMainResult = menuMainService.update(menuMain);

		// Then
		verify(menuMainServiceMapper).mapMenuMainToMenuMainEntity(menuMain, menuMainEntity);
		assertTrue(menuMainResult == menuMainSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer menuMainId = mockValues.nextInteger();

		// When
		menuMainService.delete(menuMainId);

		// Then
		verify(menuMainJpaRepository).delete(menuMainId);
		
	}

}
