/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.nichesoft.bean.RolePermission;
import com.nichesoft.bean.jpa.RolePermissionEntity;
import com.nichesoft.business.service.mapping.RolePermissionServiceMapper;
import com.nichesoft.data.repository.jpa.RolePermissionJpaRepository;
import com.nichesoft.test.RolePermissionFactoryForTest;
import com.nichesoft.test.RolePermissionEntityFactoryForTest;
import com.nichesoft.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RolePermissionService
 */
@RunWith(MockitoJUnitRunner.class)
public class RolePermissionServiceImplTest {

	@InjectMocks
	private RolePermissionServiceImpl rolePermissionService;
	@Mock
	private RolePermissionJpaRepository rolePermissionJpaRepository;
	@Mock
	private RolePermissionServiceMapper rolePermissionServiceMapper;
	
	private RolePermissionFactoryForTest rolePermissionFactoryForTest = new RolePermissionFactoryForTest();

	private RolePermissionEntityFactoryForTest rolePermissionEntityFactoryForTest = new RolePermissionEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer rolePermissionId = mockValues.nextInteger();
		
		RolePermissionEntity rolePermissionEntity = rolePermissionJpaRepository.findOne(rolePermissionId);
		
		RolePermission rolePermission = rolePermissionFactoryForTest.newRolePermission();
		when(rolePermissionServiceMapper.mapRolePermissionEntityToRolePermission(rolePermissionEntity)).thenReturn(rolePermission);

		// When
		RolePermission rolePermissionFound = rolePermissionService.findById(rolePermissionId);

		// Then
		assertEquals(rolePermission.getRolePermissionId(),rolePermissionFound.getRolePermissionId());
	}

	@Test
	public void findAll() {
		// Given
		List<RolePermissionEntity> rolePermissionEntitys = new ArrayList<RolePermissionEntity>();
		RolePermissionEntity rolePermissionEntity1 = rolePermissionEntityFactoryForTest.newRolePermissionEntity();
		rolePermissionEntitys.add(rolePermissionEntity1);
		RolePermissionEntity rolePermissionEntity2 = rolePermissionEntityFactoryForTest.newRolePermissionEntity();
		rolePermissionEntitys.add(rolePermissionEntity2);
		when(rolePermissionJpaRepository.findAll()).thenReturn(rolePermissionEntitys);
		
		RolePermission rolePermission1 = rolePermissionFactoryForTest.newRolePermission();
		when(rolePermissionServiceMapper.mapRolePermissionEntityToRolePermission(rolePermissionEntity1)).thenReturn(rolePermission1);
		RolePermission rolePermission2 = rolePermissionFactoryForTest.newRolePermission();
		when(rolePermissionServiceMapper.mapRolePermissionEntityToRolePermission(rolePermissionEntity2)).thenReturn(rolePermission2);

		// When
		List<RolePermission> rolePermissionsFounds = rolePermissionService.findAll();

		// Then
		assertTrue(rolePermission1 == rolePermissionsFounds.get(0));
		assertTrue(rolePermission2 == rolePermissionsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		RolePermission rolePermission = rolePermissionFactoryForTest.newRolePermission();

		RolePermissionEntity rolePermissionEntity = rolePermissionEntityFactoryForTest.newRolePermissionEntity();
		when(rolePermissionJpaRepository.findOne(rolePermission.getRolePermissionId())).thenReturn(null);
		
		rolePermissionEntity = new RolePermissionEntity();
		rolePermissionServiceMapper.mapRolePermissionToRolePermissionEntity(rolePermission, rolePermissionEntity);
		RolePermissionEntity rolePermissionEntitySaved = rolePermissionJpaRepository.save(rolePermissionEntity);
		
		RolePermission rolePermissionSaved = rolePermissionFactoryForTest.newRolePermission();
		when(rolePermissionServiceMapper.mapRolePermissionEntityToRolePermission(rolePermissionEntitySaved)).thenReturn(rolePermissionSaved);

		// When
		RolePermission rolePermissionResult = rolePermissionService.create(rolePermission);

		// Then
		assertTrue(rolePermissionResult == rolePermissionSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		RolePermission rolePermission = rolePermissionFactoryForTest.newRolePermission();

		RolePermissionEntity rolePermissionEntity = rolePermissionEntityFactoryForTest.newRolePermissionEntity();
		when(rolePermissionJpaRepository.findOne(rolePermission.getRolePermissionId())).thenReturn(rolePermissionEntity);

		// When
		Exception exception = null;
		try {
			rolePermissionService.create(rolePermission);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		RolePermission rolePermission = rolePermissionFactoryForTest.newRolePermission();

		RolePermissionEntity rolePermissionEntity = rolePermissionEntityFactoryForTest.newRolePermissionEntity();
		when(rolePermissionJpaRepository.findOne(rolePermission.getRolePermissionId())).thenReturn(rolePermissionEntity);
		
		RolePermissionEntity rolePermissionEntitySaved = rolePermissionEntityFactoryForTest.newRolePermissionEntity();
		when(rolePermissionJpaRepository.save(rolePermissionEntity)).thenReturn(rolePermissionEntitySaved);
		
		RolePermission rolePermissionSaved = rolePermissionFactoryForTest.newRolePermission();
		when(rolePermissionServiceMapper.mapRolePermissionEntityToRolePermission(rolePermissionEntitySaved)).thenReturn(rolePermissionSaved);

		// When
		RolePermission rolePermissionResult = rolePermissionService.update(rolePermission);

		// Then
		verify(rolePermissionServiceMapper).mapRolePermissionToRolePermissionEntity(rolePermission, rolePermissionEntity);
		assertTrue(rolePermissionResult == rolePermissionSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer rolePermissionId = mockValues.nextInteger();

		// When
		rolePermissionService.delete(rolePermissionId);

		// Then
		verify(rolePermissionJpaRepository).delete(rolePermissionId);
		
	}

}
