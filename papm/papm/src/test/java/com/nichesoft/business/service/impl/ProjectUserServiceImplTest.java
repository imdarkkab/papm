/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.nichesoft.bean.ProjectUser;
import com.nichesoft.bean.jpa.ProjectUserEntity;
import java.util.Date;
import com.nichesoft.business.service.mapping.ProjectUserServiceMapper;
import com.nichesoft.data.repository.jpa.ProjectUserJpaRepository;
import com.nichesoft.test.ProjectUserFactoryForTest;
import com.nichesoft.test.ProjectUserEntityFactoryForTest;
import com.nichesoft.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ProjectUserService
 */
@RunWith(MockitoJUnitRunner.class)
public class ProjectUserServiceImplTest {

	@InjectMocks
	private ProjectUserServiceImpl projectUserService;
	@Mock
	private ProjectUserJpaRepository projectUserJpaRepository;
	@Mock
	private ProjectUserServiceMapper projectUserServiceMapper;
	
	private ProjectUserFactoryForTest projectUserFactoryForTest = new ProjectUserFactoryForTest();

	private ProjectUserEntityFactoryForTest projectUserEntityFactoryForTest = new ProjectUserEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer projectUserId = mockValues.nextInteger();
		
		ProjectUserEntity projectUserEntity = projectUserJpaRepository.findOne(projectUserId);
		
		ProjectUser projectUser = projectUserFactoryForTest.newProjectUser();
		when(projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntity)).thenReturn(projectUser);

		// When
		ProjectUser projectUserFound = projectUserService.findById(projectUserId);

		// Then
		assertEquals(projectUser.getProjectUserId(),projectUserFound.getProjectUserId());
	}

	@Test
	public void findAll() {
		// Given
		List<ProjectUserEntity> projectUserEntitys = new ArrayList<ProjectUserEntity>();
		ProjectUserEntity projectUserEntity1 = projectUserEntityFactoryForTest.newProjectUserEntity();
		projectUserEntitys.add(projectUserEntity1);
		ProjectUserEntity projectUserEntity2 = projectUserEntityFactoryForTest.newProjectUserEntity();
		projectUserEntitys.add(projectUserEntity2);
		when(projectUserJpaRepository.findAll()).thenReturn(projectUserEntitys);
		
		ProjectUser projectUser1 = projectUserFactoryForTest.newProjectUser();
		when(projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntity1)).thenReturn(projectUser1);
		ProjectUser projectUser2 = projectUserFactoryForTest.newProjectUser();
		when(projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntity2)).thenReturn(projectUser2);

		// When
		List<ProjectUser> projectUsersFounds = projectUserService.findAll();

		// Then
		assertTrue(projectUser1 == projectUsersFounds.get(0));
		assertTrue(projectUser2 == projectUsersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ProjectUser projectUser = projectUserFactoryForTest.newProjectUser();

		ProjectUserEntity projectUserEntity = projectUserEntityFactoryForTest.newProjectUserEntity();
		when(projectUserJpaRepository.findOne(projectUser.getProjectUserId())).thenReturn(null);
		
		projectUserEntity = new ProjectUserEntity();
		projectUserServiceMapper.mapProjectUserToProjectUserEntity(projectUser, projectUserEntity);
		ProjectUserEntity projectUserEntitySaved = projectUserJpaRepository.save(projectUserEntity);
		
		ProjectUser projectUserSaved = projectUserFactoryForTest.newProjectUser();
		when(projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntitySaved)).thenReturn(projectUserSaved);

		// When
		ProjectUser projectUserResult = projectUserService.create(projectUser);

		// Then
		assertTrue(projectUserResult == projectUserSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ProjectUser projectUser = projectUserFactoryForTest.newProjectUser();

		ProjectUserEntity projectUserEntity = projectUserEntityFactoryForTest.newProjectUserEntity();
		when(projectUserJpaRepository.findOne(projectUser.getProjectUserId())).thenReturn(projectUserEntity);

		// When
		Exception exception = null;
		try {
			projectUserService.create(projectUser);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ProjectUser projectUser = projectUserFactoryForTest.newProjectUser();

		ProjectUserEntity projectUserEntity = projectUserEntityFactoryForTest.newProjectUserEntity();
		when(projectUserJpaRepository.findOne(projectUser.getProjectUserId())).thenReturn(projectUserEntity);
		
		ProjectUserEntity projectUserEntitySaved = projectUserEntityFactoryForTest.newProjectUserEntity();
		when(projectUserJpaRepository.save(projectUserEntity)).thenReturn(projectUserEntitySaved);
		
		ProjectUser projectUserSaved = projectUserFactoryForTest.newProjectUser();
		when(projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntitySaved)).thenReturn(projectUserSaved);

		// When
		ProjectUser projectUserResult = projectUserService.update(projectUser);

		// Then
		verify(projectUserServiceMapper).mapProjectUserToProjectUserEntity(projectUser, projectUserEntity);
		assertTrue(projectUserResult == projectUserSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer projectUserId = mockValues.nextInteger();

		// When
		projectUserService.delete(projectUserId);

		// Then
		verify(projectUserJpaRepository).delete(projectUserId);
		
	}

}
