/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.nichesoft.bean.Language;
import com.nichesoft.bean.jpa.LanguageEntity;
import java.util.List;
import com.nichesoft.business.service.LanguageService;
import com.nichesoft.business.service.mapping.LanguageServiceMapper;
import com.nichesoft.data.repository.jpa.LanguageJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of LanguageService
 */
@Component
@Transactional
public class LanguageServiceImpl implements LanguageService {

	@Resource
	private LanguageJpaRepository languageJpaRepository;

	@Resource
	private LanguageServiceMapper languageServiceMapper;
	
	@Override
	public Language findById(Integer languageId) {
		LanguageEntity languageEntity = languageJpaRepository.findOne(languageId);
		return languageServiceMapper.mapLanguageEntityToLanguage(languageEntity);
	}

	@Override
	public List<Language> findAll() {
		Iterable<LanguageEntity> entities = languageJpaRepository.findAll();
		List<Language> beans = new ArrayList<Language>();
		for(LanguageEntity languageEntity : entities) {
			beans.add(languageServiceMapper.mapLanguageEntityToLanguage(languageEntity));
		}
		return beans;
	}

	@Override
	public Language save(Language language) {
		return update(language) ;
	}

	@Override
	public Language create(Language language) {
		LanguageEntity languageEntity = languageJpaRepository.findOne(language.getLanguageId());
		if( languageEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		languageEntity = new LanguageEntity();
		languageServiceMapper.mapLanguageToLanguageEntity(language, languageEntity);
		LanguageEntity languageEntitySaved = languageJpaRepository.save(languageEntity);
		return languageServiceMapper.mapLanguageEntityToLanguage(languageEntitySaved);
	}

	@Override
	public Language update(Language language) {
		LanguageEntity languageEntity = languageJpaRepository.findOne(language.getLanguageId());
		languageServiceMapper.mapLanguageToLanguageEntity(language, languageEntity);
		LanguageEntity languageEntitySaved = languageJpaRepository.save(languageEntity);
		return languageServiceMapper.mapLanguageEntityToLanguage(languageEntitySaved);
	}

	@Override
	public void delete(Integer languageId) {
		languageJpaRepository.delete(languageId);
	}

	public LanguageJpaRepository getLanguageJpaRepository() {
		return languageJpaRepository;
	}

	public void setLanguageJpaRepository(LanguageJpaRepository languageJpaRepository) {
		this.languageJpaRepository = languageJpaRepository;
	}

	public LanguageServiceMapper getLanguageServiceMapper() {
		return languageServiceMapper;
	}

	public void setLanguageServiceMapper(LanguageServiceMapper languageServiceMapper) {
		this.languageServiceMapper = languageServiceMapper;
	}

}
