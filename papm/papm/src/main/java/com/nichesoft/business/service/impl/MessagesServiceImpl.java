/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.nichesoft.bean.Messages;
import com.nichesoft.bean.jpa.MessagesEntity;
import java.util.List;
import com.nichesoft.business.service.MessagesService;
import com.nichesoft.business.service.mapping.MessagesServiceMapper;
import com.nichesoft.data.repository.jpa.MessagesJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of MessagesService
 */
@Component
@Transactional
public class MessagesServiceImpl implements MessagesService {

	@Resource
	private MessagesJpaRepository messagesJpaRepository;

	@Resource
	private MessagesServiceMapper messagesServiceMapper;
	
	@Override
	public Messages findById(Integer messageId) {
		MessagesEntity messagesEntity = messagesJpaRepository.findOne(messageId);
		return messagesServiceMapper.mapMessagesEntityToMessages(messagesEntity);
	}

	@Override
	public List<Messages> findAll() {
		Iterable<MessagesEntity> entities = messagesJpaRepository.findAll();
		List<Messages> beans = new ArrayList<Messages>();
		for(MessagesEntity messagesEntity : entities) {
			beans.add(messagesServiceMapper.mapMessagesEntityToMessages(messagesEntity));
		}
		return beans;
	}

	@Override
	public Messages save(Messages messages) {
		return update(messages) ;
	}

	@Override
	public Messages create(Messages messages) {
		MessagesEntity messagesEntity = messagesJpaRepository.findOne(messages.getMessageId());
		if( messagesEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		messagesEntity = new MessagesEntity();
		messagesServiceMapper.mapMessagesToMessagesEntity(messages, messagesEntity);
		MessagesEntity messagesEntitySaved = messagesJpaRepository.save(messagesEntity);
		return messagesServiceMapper.mapMessagesEntityToMessages(messagesEntitySaved);
	}

	@Override
	public Messages update(Messages messages) {
		MessagesEntity messagesEntity = messagesJpaRepository.findOne(messages.getMessageId());
		messagesServiceMapper.mapMessagesToMessagesEntity(messages, messagesEntity);
		MessagesEntity messagesEntitySaved = messagesJpaRepository.save(messagesEntity);
		return messagesServiceMapper.mapMessagesEntityToMessages(messagesEntitySaved);
	}

	@Override
	public void delete(Integer messageId) {
		messagesJpaRepository.delete(messageId);
	}

	public MessagesJpaRepository getMessagesJpaRepository() {
		return messagesJpaRepository;
	}

	public void setMessagesJpaRepository(MessagesJpaRepository messagesJpaRepository) {
		this.messagesJpaRepository = messagesJpaRepository;
	}

	public MessagesServiceMapper getMessagesServiceMapper() {
		return messagesServiceMapper;
	}

	public void setMessagesServiceMapper(MessagesServiceMapper messagesServiceMapper) {
		this.messagesServiceMapper = messagesServiceMapper;
	}

}
