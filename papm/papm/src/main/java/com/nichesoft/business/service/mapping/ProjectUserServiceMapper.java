/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.nichesoft.bean.ProjectUser;
import com.nichesoft.bean.jpa.ProjectUserEntity;
import com.nichesoft.bean.jpa.ProjectEntity;
import com.nichesoft.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ProjectUserServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ProjectUserServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ProjectUserEntity' to 'ProjectUser'
	 * @param projectUserEntity
	 */
	public ProjectUser mapProjectUserEntityToProjectUser(ProjectUserEntity projectUserEntity) {
		if(projectUserEntity == null) {
			return null;
		}

		//--- Generic mapping 
		ProjectUser projectUser = map(projectUserEntity, ProjectUser.class);

		//--- Link mapping ( link to Project )
		if(projectUserEntity.getProject() != null) {
			projectUser.setProjectId(projectUserEntity.getProject().getProjectId());
		}
		//--- Link mapping ( link to User )
		if(projectUserEntity.getUser() != null) {
			projectUser.setUserId(projectUserEntity.getUser().getUserId());
		}
		return projectUser;
	}
	
	/**
	 * Mapping from 'ProjectUser' to 'ProjectUserEntity'
	 * @param projectUser
	 * @param projectUserEntity
	 */
	public void mapProjectUserToProjectUserEntity(ProjectUser projectUser, ProjectUserEntity projectUserEntity) {
		if(projectUser == null) {
			return;
		}

		//--- Generic mapping 
		map(projectUser, projectUserEntity);

		//--- Link mapping ( link : projectUser )
		if( hasLinkToProject(projectUser) ) {
			ProjectEntity project1 = new ProjectEntity();
			project1.setProjectId( projectUser.getProjectId() );
			projectUserEntity.setProject( project1 );
		} else {
			projectUserEntity.setProject( null );
		}

		//--- Link mapping ( link : projectUser )
		if( hasLinkToUser(projectUser) ) {
			UserEntity user2 = new UserEntity();
			user2.setUserId( projectUser.getUserId() );
			projectUserEntity.setUser( user2 );
		} else {
			projectUserEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that Project id is valid.
	 * @param Project Project
	 * @return boolean
	 */
	private boolean hasLinkToProject(ProjectUser projectUser) {
		if(projectUser.getProjectId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(ProjectUser projectUser) {
		if(projectUser.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}