/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:20 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.nichesoft.bean.UserPermission;
import com.nichesoft.bean.jpa.UserPermissionEntity;
import com.nichesoft.bean.jpa.PermissionEntity;
import com.nichesoft.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class UserPermissionServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public UserPermissionServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'UserPermissionEntity' to 'UserPermission'
	 * @param userPermissionEntity
	 */
	public UserPermission mapUserPermissionEntityToUserPermission(UserPermissionEntity userPermissionEntity) {
		if(userPermissionEntity == null) {
			return null;
		}

		//--- Generic mapping 
		UserPermission userPermission = map(userPermissionEntity, UserPermission.class);

		//--- Link mapping ( link to Permission )
		if(userPermissionEntity.getPermission() != null) {
			userPermission.setPermissionId(userPermissionEntity.getPermission().getPermissionId());
		}
		//--- Link mapping ( link to User )
		if(userPermissionEntity.getUser() != null) {
			userPermission.setUserId(userPermissionEntity.getUser().getUserId());
		}
		return userPermission;
	}
	
	/**
	 * Mapping from 'UserPermission' to 'UserPermissionEntity'
	 * @param userPermission
	 * @param userPermissionEntity
	 */
	public void mapUserPermissionToUserPermissionEntity(UserPermission userPermission, UserPermissionEntity userPermissionEntity) {
		if(userPermission == null) {
			return;
		}

		//--- Generic mapping 
		map(userPermission, userPermissionEntity);

		//--- Link mapping ( link : userPermission )
		if( hasLinkToPermission(userPermission) ) {
			PermissionEntity permission1 = new PermissionEntity();
			permission1.setPermissionId( userPermission.getPermissionId() );
			userPermissionEntity.setPermission( permission1 );
		} else {
			userPermissionEntity.setPermission( null );
		}

		//--- Link mapping ( link : userPermission )
		if( hasLinkToUser(userPermission) ) {
			UserEntity user2 = new UserEntity();
			user2.setUserId( userPermission.getUserId() );
			userPermissionEntity.setUser( user2 );
		} else {
			userPermissionEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that Permission id is valid.
	 * @param Permission Permission
	 * @return boolean
	 */
	private boolean hasLinkToPermission(UserPermission userPermission) {
		if(userPermission.getPermissionId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(UserPermission userPermission) {
		if(userPermission.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}