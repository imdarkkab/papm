/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.nichesoft.bean.Role;
import com.nichesoft.bean.jpa.RoleEntity;
import java.util.List;
import com.nichesoft.business.service.RoleService;
import com.nichesoft.business.service.mapping.RoleServiceMapper;
import com.nichesoft.data.repository.jpa.RoleJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of RoleService
 */
@Component
@Transactional
public class RoleServiceImpl implements RoleService {

	@Resource
	private RoleJpaRepository roleJpaRepository;

	@Resource
	private RoleServiceMapper roleServiceMapper;
	
	@Override
	public Role findById(Integer roleId) {
		RoleEntity roleEntity = roleJpaRepository.findOne(roleId);
		return roleServiceMapper.mapRoleEntityToRole(roleEntity);
	}

	@Override
	public List<Role> findAll() {
		Iterable<RoleEntity> entities = roleJpaRepository.findAll();
		List<Role> beans = new ArrayList<Role>();
		for(RoleEntity roleEntity : entities) {
			beans.add(roleServiceMapper.mapRoleEntityToRole(roleEntity));
		}
		return beans;
	}

	@Override
	public Role save(Role role) {
		return update(role) ;
	}

	@Override
	public Role create(Role role) {
		RoleEntity roleEntity = roleJpaRepository.findOne(role.getRoleId());
		if( roleEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		roleEntity = new RoleEntity();
		roleServiceMapper.mapRoleToRoleEntity(role, roleEntity);
		RoleEntity roleEntitySaved = roleJpaRepository.save(roleEntity);
		return roleServiceMapper.mapRoleEntityToRole(roleEntitySaved);
	}

	@Override
	public Role update(Role role) {
		RoleEntity roleEntity = roleJpaRepository.findOne(role.getRoleId());
		roleServiceMapper.mapRoleToRoleEntity(role, roleEntity);
		RoleEntity roleEntitySaved = roleJpaRepository.save(roleEntity);
		return roleServiceMapper.mapRoleEntityToRole(roleEntitySaved);
	}

	@Override
	public void delete(Integer roleId) {
		roleJpaRepository.delete(roleId);
	}

	public RoleJpaRepository getRoleJpaRepository() {
		return roleJpaRepository;
	}

	public void setRoleJpaRepository(RoleJpaRepository roleJpaRepository) {
		this.roleJpaRepository = roleJpaRepository;
	}

	public RoleServiceMapper getRoleServiceMapper() {
		return roleServiceMapper;
	}

	public void setRoleServiceMapper(RoleServiceMapper roleServiceMapper) {
		this.roleServiceMapper = roleServiceMapper;
	}

}
