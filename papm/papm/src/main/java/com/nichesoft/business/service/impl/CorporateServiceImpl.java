/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:18 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.nichesoft.bean.Corporate;
import com.nichesoft.bean.jpa.CorporateEntity;
import java.util.Date;
import com.nichesoft.business.service.CorporateService;
import com.nichesoft.business.service.mapping.CorporateServiceMapper;
import com.nichesoft.data.repository.jpa.CorporateJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CorporateService
 */
@Component
@Transactional
public class CorporateServiceImpl implements CorporateService {

	@Resource
	private CorporateJpaRepository corporateJpaRepository;

	@Resource
	private CorporateServiceMapper corporateServiceMapper;
	
	@Override
	public Corporate findById(Integer corporateId) {
		CorporateEntity corporateEntity = corporateJpaRepository.findOne(corporateId);
		return corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntity);
	}

	@Override
	public List<Corporate> findAll() {
		Iterable<CorporateEntity> entities = corporateJpaRepository.findAll();
		List<Corporate> beans = new ArrayList<Corporate>();
		for(CorporateEntity corporateEntity : entities) {
			beans.add(corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntity));
		}
		return beans;
	}

	@Override
	public Corporate save(Corporate corporate) {
		return update(corporate) ;
	}

	@Override
	public Corporate create(Corporate corporate) {
		CorporateEntity corporateEntity = corporateJpaRepository.findOne(corporate.getCorporateId());
		if( corporateEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		corporateEntity = new CorporateEntity();
		corporateServiceMapper.mapCorporateToCorporateEntity(corporate, corporateEntity);
		CorporateEntity corporateEntitySaved = corporateJpaRepository.save(corporateEntity);
		return corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntitySaved);
	}

	@Override
	public Corporate update(Corporate corporate) {
		CorporateEntity corporateEntity = corporateJpaRepository.findOne(corporate.getCorporateId());
		corporateServiceMapper.mapCorporateToCorporateEntity(corporate, corporateEntity);
		CorporateEntity corporateEntitySaved = corporateJpaRepository.save(corporateEntity);
		return corporateServiceMapper.mapCorporateEntityToCorporate(corporateEntitySaved);
	}

	@Override
	public void delete(Integer corporateId) {
		corporateJpaRepository.delete(corporateId);
	}

	public CorporateJpaRepository getCorporateJpaRepository() {
		return corporateJpaRepository;
	}

	public void setCorporateJpaRepository(CorporateJpaRepository corporateJpaRepository) {
		this.corporateJpaRepository = corporateJpaRepository;
	}

	public CorporateServiceMapper getCorporateServiceMapper() {
		return corporateServiceMapper;
	}

	public void setCorporateServiceMapper(CorporateServiceMapper corporateServiceMapper) {
		this.corporateServiceMapper = corporateServiceMapper;
	}

}
