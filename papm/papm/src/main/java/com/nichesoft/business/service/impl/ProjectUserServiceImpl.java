/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.nichesoft.bean.ProjectUser;
import com.nichesoft.bean.jpa.ProjectUserEntity;
import java.util.Date;
import com.nichesoft.business.service.ProjectUserService;
import com.nichesoft.business.service.mapping.ProjectUserServiceMapper;
import com.nichesoft.data.repository.jpa.ProjectUserJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ProjectUserService
 */
@Component
@Transactional
public class ProjectUserServiceImpl implements ProjectUserService {

	@Resource
	private ProjectUserJpaRepository projectUserJpaRepository;

	@Resource
	private ProjectUserServiceMapper projectUserServiceMapper;
	
	@Override
	public ProjectUser findById(Integer projectUserId) {
		ProjectUserEntity projectUserEntity = projectUserJpaRepository.findOne(projectUserId);
		return projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntity);
	}

	@Override
	public List<ProjectUser> findAll() {
		Iterable<ProjectUserEntity> entities = projectUserJpaRepository.findAll();
		List<ProjectUser> beans = new ArrayList<ProjectUser>();
		for(ProjectUserEntity projectUserEntity : entities) {
			beans.add(projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntity));
		}
		return beans;
	}

	@Override
	public ProjectUser save(ProjectUser projectUser) {
		return update(projectUser) ;
	}

	@Override
	public ProjectUser create(ProjectUser projectUser) {
		ProjectUserEntity projectUserEntity = projectUserJpaRepository.findOne(projectUser.getProjectUserId());
		if( projectUserEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		projectUserEntity = new ProjectUserEntity();
		projectUserServiceMapper.mapProjectUserToProjectUserEntity(projectUser, projectUserEntity);
		ProjectUserEntity projectUserEntitySaved = projectUserJpaRepository.save(projectUserEntity);
		return projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntitySaved);
	}

	@Override
	public ProjectUser update(ProjectUser projectUser) {
		ProjectUserEntity projectUserEntity = projectUserJpaRepository.findOne(projectUser.getProjectUserId());
		projectUserServiceMapper.mapProjectUserToProjectUserEntity(projectUser, projectUserEntity);
		ProjectUserEntity projectUserEntitySaved = projectUserJpaRepository.save(projectUserEntity);
		return projectUserServiceMapper.mapProjectUserEntityToProjectUser(projectUserEntitySaved);
	}

	@Override
	public void delete(Integer projectUserId) {
		projectUserJpaRepository.delete(projectUserId);
	}

	public ProjectUserJpaRepository getProjectUserJpaRepository() {
		return projectUserJpaRepository;
	}

	public void setProjectUserJpaRepository(ProjectUserJpaRepository projectUserJpaRepository) {
		this.projectUserJpaRepository = projectUserJpaRepository;
	}

	public ProjectUserServiceMapper getProjectUserServiceMapper() {
		return projectUserServiceMapper;
	}

	public void setProjectUserServiceMapper(ProjectUserServiceMapper projectUserServiceMapper) {
		this.projectUserServiceMapper = projectUserServiceMapper;
	}

}
