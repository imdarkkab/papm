/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.nichesoft.bean.RolePermission;
import com.nichesoft.bean.jpa.RolePermissionEntity;
import com.nichesoft.bean.jpa.PermissionEntity;
import com.nichesoft.bean.jpa.RoleEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class RolePermissionServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public RolePermissionServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'RolePermissionEntity' to 'RolePermission'
	 * @param rolePermissionEntity
	 */
	public RolePermission mapRolePermissionEntityToRolePermission(RolePermissionEntity rolePermissionEntity) {
		if(rolePermissionEntity == null) {
			return null;
		}

		//--- Generic mapping 
		RolePermission rolePermission = map(rolePermissionEntity, RolePermission.class);

		//--- Link mapping ( link to Permission )
		if(rolePermissionEntity.getPermission() != null) {
			rolePermission.setPermissionId(rolePermissionEntity.getPermission().getPermissionId());
		}
		//--- Link mapping ( link to Role )
		if(rolePermissionEntity.getRole() != null) {
			rolePermission.setRoleId(rolePermissionEntity.getRole().getRoleId());
		}
		return rolePermission;
	}
	
	/**
	 * Mapping from 'RolePermission' to 'RolePermissionEntity'
	 * @param rolePermission
	 * @param rolePermissionEntity
	 */
	public void mapRolePermissionToRolePermissionEntity(RolePermission rolePermission, RolePermissionEntity rolePermissionEntity) {
		if(rolePermission == null) {
			return;
		}

		//--- Generic mapping 
		map(rolePermission, rolePermissionEntity);

		//--- Link mapping ( link : rolePermission )
		if( hasLinkToPermission(rolePermission) ) {
			PermissionEntity permission1 = new PermissionEntity();
			permission1.setPermissionId( rolePermission.getPermissionId() );
			rolePermissionEntity.setPermission( permission1 );
		} else {
			rolePermissionEntity.setPermission( null );
		}

		//--- Link mapping ( link : rolePermission )
		if( hasLinkToRole(rolePermission) ) {
			RoleEntity role2 = new RoleEntity();
			role2.setRoleId( rolePermission.getRoleId() );
			rolePermissionEntity.setRole( role2 );
		} else {
			rolePermissionEntity.setRole( null );
		}

	}
	
	/**
	 * Verify that Permission id is valid.
	 * @param Permission Permission
	 * @return boolean
	 */
	private boolean hasLinkToPermission(RolePermission rolePermission) {
		if(rolePermission.getPermissionId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Role id is valid.
	 * @param Role Role
	 * @return boolean
	 */
	private boolean hasLinkToRole(RolePermission rolePermission) {
		if(rolePermission.getRoleId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}