/*
 * Created on 27 ¡.¾. 2558 ( Time 16:44:19 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.nichesoft.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.nichesoft.bean.Permission;
import com.nichesoft.bean.jpa.PermissionEntity;
import java.util.List;
import com.nichesoft.business.service.PermissionService;
import com.nichesoft.business.service.mapping.PermissionServiceMapper;
import com.nichesoft.data.repository.jpa.PermissionJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of PermissionService
 */
@Component
@Transactional
public class PermissionServiceImpl implements PermissionService {

	@Resource
	private PermissionJpaRepository permissionJpaRepository;

	@Resource
	private PermissionServiceMapper permissionServiceMapper;
	
	@Override
	public Permission findById(Integer permissionId) {
		PermissionEntity permissionEntity = permissionJpaRepository.findOne(permissionId);
		return permissionServiceMapper.mapPermissionEntityToPermission(permissionEntity);
	}

	@Override
	public List<Permission> findAll() {
		Iterable<PermissionEntity> entities = permissionJpaRepository.findAll();
		List<Permission> beans = new ArrayList<Permission>();
		for(PermissionEntity permissionEntity : entities) {
			beans.add(permissionServiceMapper.mapPermissionEntityToPermission(permissionEntity));
		}
		return beans;
	}

	@Override
	public Permission save(Permission permission) {
		return update(permission) ;
	}

	@Override
	public Permission create(Permission permission) {
		PermissionEntity permissionEntity = permissionJpaRepository.findOne(permission.getPermissionId());
		if( permissionEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		permissionEntity = new PermissionEntity();
		permissionServiceMapper.mapPermissionToPermissionEntity(permission, permissionEntity);
		PermissionEntity permissionEntitySaved = permissionJpaRepository.save(permissionEntity);
		return permissionServiceMapper.mapPermissionEntityToPermission(permissionEntitySaved);
	}

	@Override
	public Permission update(Permission permission) {
		PermissionEntity permissionEntity = permissionJpaRepository.findOne(permission.getPermissionId());
		permissionServiceMapper.mapPermissionToPermissionEntity(permission, permissionEntity);
		PermissionEntity permissionEntitySaved = permissionJpaRepository.save(permissionEntity);
		return permissionServiceMapper.mapPermissionEntityToPermission(permissionEntitySaved);
	}

	@Override
	public void delete(Integer permissionId) {
		permissionJpaRepository.delete(permissionId);
	}

	public PermissionJpaRepository getPermissionJpaRepository() {
		return permissionJpaRepository;
	}

	public void setPermissionJpaRepository(PermissionJpaRepository permissionJpaRepository) {
		this.permissionJpaRepository = permissionJpaRepository;
	}

	public PermissionServiceMapper getPermissionServiceMapper() {
		return permissionServiceMapper;
	}

	public void setPermissionServiceMapper(PermissionServiceMapper permissionServiceMapper) {
		this.permissionServiceMapper = permissionServiceMapper;
	}

}
